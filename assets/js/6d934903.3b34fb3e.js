"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[255],{9256:(e,n,t)=>{t.d(n,{z:()=>a});var s=t(1085);const a=e=>{let{alignItems:n,children:t,justifyContent:a="flex-start",spacing:r=0}=e;return(0,s.jsx)("div",{style:{gap:r,flexDirection:"row",justifyContent:a,alignItems:n,display:"flex"},children:t})}},9718:(e,n,t)=>{t.d(n,{T:()=>a});var s=t(1085);const a=e=>{let{alignItems:n,children:t,justifyContent:a="flex-start",spacing:r=0}=e;return(0,s.jsx)("div",{style:{gap:r,flexDirection:"column",justifyContent:a,alignItems:n,display:"flex"},children:t})}},3134:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var s=t(1085),a=t(1184),r=(t(9256),t(9718));const d=t.p+"assets/medias/slow-before-72709b42c4f74ef1ae56289b1349cf18.mp4",i=t.p+"assets/medias/slow-after-c8c05472ce118df4e86a03c184f35502.mp4",o={sidebar_position:5},l="Troubleshooting",c={id:"fundamentals/troubleshooting",title:"Troubleshooting",description:"The following are the most common issues found when using Flash Calendar and a",source:"@site/docs/fundamentals/troubleshooting.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/troubleshooting",permalink:"/flash-calendar/fundamentals/troubleshooting",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"Tips and Tricks",permalink:"/flash-calendar/fundamentals/tips-and-tricks"},next:{title:"Limitations",permalink:"/flash-calendar/fundamentals/limitations"}},h={},u=[{value:"<code>FlashList&#39;s rendered size is not usable.</code>",id:"flashlists-rendered-size-is-not-usable",level:2},{value:"<code>ReferenceError: Can&#39;t find variable: Intl</code> (Android)",id:"referenceerror-cant-find-variable-intl-android",level:2},{value:"Calendar.List is slow when using date ranges",id:"calendarlist-is-slow-when-using-date-ranges",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.p,{children:"The following are the most common issues found when using Flash Calendar and a\nguide on how to fix them."}),"\n",(0,s.jsx)(n.h2,{id:"flashlists-rendered-size-is-not-usable",children:(0,s.jsx)(n.code,{children:"FlashList's rendered size is not usable."})}),"\n",(0,s.jsxs)(n.p,{children:["Check out ",(0,s.jsx)(n.a,{href:"https://shopify.github.io/flash-list/docs/known-issues/#1-flashlists-rendered-size-is-not-usable-warning",children:"Flash List\ndocs"}),"\nfor instructions on how to fix this warning."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TLDR"}),": ensure the parent of ",(0,s.jsx)(n.code,{children:"<Calendar.List />"})," has a fixed height or a\n",(0,s.jsx)(n.code,{children:"flex: 1"})," style."]}),"\n",(0,s.jsxs)(n.h2,{id:"referenceerror-cant-find-variable-intl-android",children:[(0,s.jsx)(n.code,{children:"ReferenceError: Can't find variable: Intl"})," (Android)"]}),"\n",(0,s.jsxs)(n.p,{children:["Flash Calendar uses ",(0,s.jsx)(n.code,{children:"Intl"})," primitives to format dates in a locale-aware way.\nJavaScriptCore (",(0,s.jsx)(n.code,{children:"jsc"}),"), the legacy React Native JS runtime, doesn't support\n",(0,s.jsx)(n.code,{children:"Intl"})," out of the box on Android."]}),"\n",(0,s.jsxs)(n.p,{children:["It's highly advised to upgrade to ",(0,s.jsx)(n.code,{children:"Hermes"}),", the new default JS runtime (",(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/hermes",children:"more on\nthat"}),"). Besides better performance, it also\nsupports the ",(0,s.jsx)(n.code,{children:"Intl"})," primitives Flash Calendar uses. For Expo, update your\n",(0,s.jsx)(n.code,{children:"app.json"})," to use ",(0,s.jsx)(n.code,{children:"hermes"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "expo": {\n    "jsEngine": "hermes"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If your company is stuck with ",(0,s.jsx)(n.code,{children:"jsc"}),", you can either use a polyfill, or bypass\n",(0,s.jsx)(n.code,{children:"Intl"})," entirely by ",(0,s.jsx)(n.a,{href:"/fundamentals/usage#custom-date-formatting",children:"providing your own date formatting\nfunctions"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"calendarlist-is-slow-when-using-date-ranges",children:"Calendar.List is slow when using date ranges"}),"\n",(0,s.jsxs)(n.p,{children:["If you're seeing frame drops when using ",(0,s.jsx)(n.code,{children:"Calendar.List"}),", there's a high chance\nyou're suffering from too many re-renders. If you're not careful with\nmemoization, the entire list re-renders whenever the ",(0,s.jsx)(n.code,{children:"calendarActiveDateRanges"}),"\nprop changes. ",(0,s.jsxs)(n.strong,{children:["Notice the frame drops and how each ",(0,s.jsx)(n.code,{children:"BaseCalendar"})," re-renders in\nthe React DevTools profiler (this is bad \ud83d\udc4e)"]}),":"]}),"\n",(0,s.jsxs)(r.T,{spacing:24,alignItems:"flex-start",children:[(0,s.jsx)("video",{controls:!0,width:"100%",children:(0,s.jsx)("source",{src:d,type:"video/mp4"})}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Calendar, toDateId } from "@marceloterreiro/flash-calendar";\nimport { addMonths } from "date-fns";\nimport { Text } from "react-native";\n\nconst todayId = toDateId(new Date());\nconst maxDateId = toDateId(addMonths(new Date(), 12));\n\nexport const SlowExample = () => {\n  const [dateIds, setDateIds] = useState<string[]>([]);\n  const dateRanges = dateIds.map((dateId) => ({\n    startId: dateId,\n    endId: dateId,\n  }));\n\n  return (\n    <Calendar.VStack alignItems="stretch" grow spacing={12}>\n      <Text>\u26a0\ufe0f Don\'t copy-paste this example, it has performance issues</Text>\n\n      <Calendar.List\n        calendarActiveDateRanges={dateRanges}\n        calendarInitialMonthId={todayId}\n        calendarMaxDateId={maxDateId}\n        calendarMinDateId={todayId}\n        onCalendarDayPress={(dateId) => {\n          if (dateIds.includes(dateId)) {\n            setDateIds(dateIds.filter((id) => id !== dateId));\n          } else {\n            setDateIds([...dateIds, dateId]);\n          }\n        }}\n      />\n    </Calendar.VStack>\n  );\n};\n'})})})]}),"\n",(0,s.jsxs)(n.p,{children:["The easiest fix is to use the provided ",(0,s.jsxs)(n.a,{href:"/fundamentals/usage#date-range-picker",children:[(0,s.jsx)(n.code,{children:"useDateRange"}),"\nhook"]}),". The hook is optimized by default\nand works perfectly with ",(0,s.jsx)(n.code,{children:"Calendar.List"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["However, there might be cases where you need to control the ",(0,s.jsx)(n.code,{children:"onCalendarDayPress"}),"\nevent and decide how the date range logic works. In those cases, make sure you\nmemoize the ",(0,s.jsx)(n.code,{children:"onCalendarDayPress"})," and use the ",(0,s.jsx)(n.a,{href:"https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state",children:"updater function\npattern"}),".\n",(0,s.jsxs)(n.strong,{children:["Notice it runs on 60 FPS and the ",(0,s.jsx)(n.code,{children:"BaseCalendar"})," components don't re-render\nanymore (this is good \ud83d\udc4d)"]}),":"]}),"\n",(0,s.jsxs)(r.T,{spacing:24,alignItems:"flex-start",children:[(0,s.jsx)("video",{controls:!0,width:"100%",children:(0,s.jsx)("source",{src:i,type:"video/mp4"})}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import type { CalendarOnDayPress } from "@marceloterreiro/flash-calendar";\nimport { Calendar, toDateId } from "@marceloterreiro/flash-calendar";\nimport { addMonths } from "date-fns";\nimport { useCallback, useState } from "react";\nimport { View, Text } from "react-native";\n\nconst todayId = toDateId(new Date());\nconst maxDateId = toDateId(addMonths(new Date(), 12));\n\nexport const SlowExampleAddressed = () => {\n  const [dateIds, setDateIds] = useState<string[]>([]);\n  const dateRanges = dateIds.map((dateId) => ({\n    startId: dateId,\n    endId: dateId,\n  }));\n\n  // highlight-start\n  // This is the fix: memoized onCalendarDayPress and updater function pattern\n  // It keeps `BaseCalendar` props stable, allowing each month to skip re-renders\n  const handleCalendarDayPress = useCallback<CalendarOnDayPress>((dateId) => {\n    setDateIds((dateIds) => {\n      if (dateIds.includes(dateId)) {\n        return dateIds.filter((id) => id !== dateId);\n      } else {\n        return [...dateIds, dateId];\n      }\n    });\n  }, []);\n  // highlight-end\n\n  return (\n    <View style={{ paddingTop: 80, flex: 1, width: "100%" }}>\n      <Calendar.VStack alignItems="stretch" grow spacing={12}>\n        <Text>\u2705 This is safe to copy, perf issues addressed</Text>\n\n        <Calendar.List\n          calendarActiveDateRanges={dateRanges}\n          calendarInitialMonthId={todayId}\n          calendarMaxDateId={maxDateId}\n          calendarMinDateId={todayId}\n          onCalendarDayPress={handleCalendarDayPress}\n        />\n      </Calendar.VStack>\n    </View>\n  );\n};\n'})})})]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var s=t(4041);const a={},r=s.createContext(a);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);